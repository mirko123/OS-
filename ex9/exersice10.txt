Задача 1:
Реализирайте команда wc, с един аргумент подаден като входен параметър

Задача 2:
Реализирайте команда cp, работеща с два аргумента, подадени като входни параметри. 

Задача 3:
Реализирайте команда swap, разменяща съдържанието на два файла, подадени като входни параметри.

Задача 4:
Реализирайте команда cat, работеща с произволен брой подадени входни параметри.

Задача 5:
Реализирайте команда cp, работеща с произволен брой подадени входни параметри.

Задача 6:
Koпирайте файл /etc/passwd в текущата ви работна директория и променете разделителят на копирания файл 
от ":", на "?"




















Опростено на максимум решение на задача 1:
//Реализирайте команда wc, с един аргумент подаден като входен параметър
//По-долу е предоставен вариант на решение на задачата без проверки (във възможно най-опростен вариант)
#include <fcntl.h>
#include <stdlib.h>
#include <stdio.h>

main (int argc, char* argv[]){
        int fd1;
        char c;         //променлива, чрез която ще обхождам съдържанието на файла подаден като първи входен параметър
        int lines=0, words=0, chars=0;

        fd1 = open(argv[1], O_RDONLY);
        //Обхождам файла символ по символ и следя за разни символи, при които трябва да предприема някакво действие.
        //проверка дали успешно съм достъпил символ от съдържанието на файла.
        while( read(fd1, &c, 1) ){
                if(c=='\n'){
                        lines++;
                        words++;
                }

                if(c==' '){
                        words++;
                }

                chars++;

        }

        printf("File %s has:\n%d number of lines.\n%d number of words.\n%d number of chars.\n", argv[1], lines, words, chars);
        close(fd1);
}


Истинско решение на задача 1:

//Реализирайте команда wc, с един аргумент подаден като входен параметър
//По-долу е предоставен вариант на решение на задачата включващ проверки.
#include <fcntl.h>
#include <stdlib.h>
#include <stdio.h>

main (int argc, char* argv[]){
        int fd1;
        char c;         //променлива, чрез която ще обхождам съдържанието на файла подаден като първи входен параметър
        int lines=0, words=0, chars=0;
        ssize_t read_size;      // Променлива, чрез която ще следя дали не настъпва грешка повреме на обхождането на съдържанието на файла.
        //Променливата е тип ssize_t, тъй като функцията read връща стойност тип ssize_t.

        /*
          проверка дали е подаден точно един входен параметър
          2 означава че имаме точно един входен параметър (другият е името на самата команда)
          Пример: ./wc wc.c
          Първят е "wc", вторият "wc.c"
        */

        if (argc != 2){
                write(2,"Йоу, wrong number of arguments!\n", 32);
                exit(1);
        }

        /*
          Oтваряне на файлът подаден като първи входен параметър в режим на четене
          и проверка дали операцията се е осъществила успешно.
        */
        if ( (fd1 = open(argv[1], O_RDONLY)) == -1 ){
                write(2, "Operation open failed!", 27);
                exit(1);
        }

        //Обхождам файла символ по символ и следя за разни символи, при които трябва да предприема някакво действие.
        //проверка дали успешно съм достъпил символ от съдържанието на файла.
        while( ( read_size=read(fd1, &c, 1) ) > 0 ){
                if(c=='\n'){
                        lines++;
                        words++;
                }

                if(c==' '){
                        words++;
                }

                chars++;
        }

        printf("File %s has:\n%d number of lines.\n%d number of words.\n%d number of chars.\n", argv[1], lines, words, chars);
        close(fd1);
}


Решение на задача 2:
//Реализирайте команда swap, разменяща
//съдържанието на два файла, подадени като
//входни параметри.
//Приемаме, че двата файла имат еднакъв брой символи. Може да модифицирате(например Даяна) решението, да работи и когато нямат еднакъв брой символи.

#include <fcntl.h>      //библиотека съдържаща реализиция на функции open, read, write, ..
#include <stdlib.h>     //библиотека съдържаща реализация на функция exit
#include <stdio.h>      //библиотека съдържаща реализация на фунцкия printf

main (int argc, char* argv[]){
        int fd1, fd2, fd3; //третият файлов дескриптор ще асоциирам с третият, помощен файл.
        char c[4096];   //променлива, чрез която ще обхождам съдържанието на файлoвете поблоково (четене и писане от/в файл/ове е препоръчително да се извършва на порции (на блокове от данни, а не символ по символ). Така става по-ефективно.)
        //пп1: в задачата за реализация на команда wc, нямаше как да избегнем посимволното обхождане.
        //пп2: помислете дали пп1: е истина?

        ssize_t read_size;      // Променлива, чрез която ще следя дали не настъпва грешка повреме на обхождането на съдържанието на файловете.

        /*
          проверка дали сa подадени точно два входни параметъра
        */
        if (argc != 3){
                write(2,"Йоу, wrong number of arguments!\n", 32);
                exit(1);
        }

        /*
          Oтваряне на файлът подаден като първи входен параметър едновременно в режим на четене и писане
          и проверка дали операцията се е осъществила успешно.
        */
        if ( (fd1 = open(argv[1], O_RDWR)) == -1 ){
                write(2, "Operation open failed!", 27);
                exit(1);
        }

        if ( (fd2 = open(argv[2], O_RDWR)) == -1 ){
                write(2, "Operation open failed!", 27);
                exit(1);
        }

        //Създаване на нов помощен файл, чрез който ще си реша задачата по-лесно.
        if ( (fd3 = open("my_temp_file", O_CREAT|O_RDWR|O_TRUNC)) == -1 ){
                write(2, "Operation open failed!", 27);
                exit(1);
        }

        //проверка дали успешно съм достъпил символ от съдържанието на файла.
        while( ( read_size=read(fd1, &c, sizeof(c)) ) > 0 ){
        //some debugging
        //printf("%s", c);
        //printf("%d", read_size);
                if ( write(fd3, &c, read_size) != read_size ){
                        write(2, "Error while writing occured!", 28);
                        exit(1);
                }
        }

        //Тъй като вече един път съм обходил файла подаден като първи входен параметър, трябва да се погрижа за указателя.
        lseek(fd1,0,SEEK_SET);
        while( ( read_size=read(fd2, &c, sizeof(c)) ) > 0 ){
                if ( write(fd1, &c, read_size) != read_size ){
                        write(2, "Error while writing occured!", 28);
                        exit(1);
                }
        }

        lseek(fd2, 0, SEEK_SET);
        lseek(fd3, 0, SEEK_SET);
        while( ( read_size=read(fd3, &c, sizeof(c)) ) > 0 ){
                if ( write(fd2, &c, read_size) != read_size ){
                        write(2, "Error while writing occured!", 28);
                        exit(1);
                }
        }
        close(fd1);
        close(fd2);
        close(fd3);
}


Решение на задача 3:
//Задача 3:
//Реализирайте команда cp, работеща с два аргумента, подадени като входни параметри.

#include <fcntl.h>
#include <stdlib.h>
#include <stdio.h>
main (int argc, char* argv[]){
        int fd1, fd2;
        char c;         //променлива, чрез която ще обхождам съдържанието на файла подаден като първи входен параметър
        ssize_t read_size;      // Променлива, чрез която ще следя дали не настъпва грешка повреме на обхождането на съдържанието на файла.
        //Променливата е тип ssize_t, тъй като функцията read връща стойност тип ssize_t.

        if (argc != 3){
                write(2,"Йоу, wrong number of arguments!\n", 32);
                exit(1);
        }

        /*
          Oтваряне на файлът подаден като първи входен параметър в режим на четене
          и проверка дали операцията се е осъществила успешно.
        */
        if ( (fd1 = open(argv[1], O_RDONLY)) == -1 ){
                write(2, "Operation open failed!", 27);
                exit(1);
        }

        /*
          Oтваряне на файл в режим на писане, ако не съществува го създава, ако съществува му занулява съдържаниет.
        */

        if ( (fd2 = open(argv[2], O_CREAT|O_WRONLY|O_TRUNC)) == -1 ){
                write(2, "Operation open failed!", 27);
                exit(1);
        }

        //каквото прочета от първия файл го записвам във втория файл
        //проверка дали успешно съм достъпил символ от съдържанието на файла.
        while( ( read_size=read(fd1, &c, 1) ) > 0 ){
                 if ( write(fd2, &c, read_size) != read_size ){
                        write(2, "Error while writing occured!", 28);
                        exit(1);
                }
        }
        close(fd1);
        close(fd2);
}


Решение на задача 4:
//Задача 4:
//Реализирайте команда cat, работеща с произволен брой подадени входни параметри.

#include <fcntl.h>
#include <stdlib.h>
#include <stdio.h>
main (int argc, char* argv[]){
        int fd1;
        int i;
        char c;         //променлива, чрез която ще обхождам съдържанието на файла подаден като първи входен параметър
        ssize_t read_size;      // Променлива, чрез която ще следя дали не настъпва грешка повреме на обхождането на съдържанието на файла.
        //Променливата е тип ssize_t, тъй като функцията read връща стойност тип ssize_t.

        /*
          проверка дали е подаден поне един входен параметър
        */
        if (argc < 2){
                write(2,"Йоу, wrong number of arguments!\n", 32);
                exit(1);
        }

        /*
          Обхождане на входните параметри и последователното им отваряне в режим на четене
          както и последвала проверка дали операцията се е осъществила успешно.
        */
        for(i=1;i<=argc;i++){
                if ( (fd1 = open(argv[i], O_RDONLY)) == -1 ){
                        write(2, "Operation open failed!", 27);
                        exit(1);
                }

                //Обхождам файла символ по символ и следя за разни символи, при които трябва да предприема някакво действие.
                //проверка дали успешно съм достъпил символ от съдържанието на файла.
                while( ( read_size=read(fd1, &c, 1) ) > 0 ){
                        if ( write(1, &c, read_size) != read_size ){
                                write(2, "Error while writing occured!", 28);
                                exit(1);
                        }
                }
                close(fd1);
        }
}


Решение на задача 5:
//Задача 5:
//Реализирайте команда cp, работеща с произволен брой подадени входни параметри.
//приемам, че подадения вход при стартиране на програмата ще бъде следния:
//при два подадени параметъра и двата ще бъдат файлове
//при повече от два подадени параметъра, всички ще бъдат файлове без последния, последният ще бъде съществуваща директория.
//предоставеното решение на задачата има странични ефекти, свързани с правата на ново създадените файлове.

#include <fcntl.h>
#include <stdlib.h>
#include <stdio.h>

main (int argc, char* argv[]){
        int fd1, fd2;
        int i;
        char c;         //променлива, чрез която ще обхождам съдържанието на файла подаден като първи входен параметър
        ssize_t read_size;      // Променлива, чрез която ще следя дали не настъпва грешка повреме на обхождането на съдържанието на файла.
        //Променливата е тип ssize_t, тъй като функцията read връща стойност тип ssize_t.

        /*
          проверка дали е подаден поне два входни параметъра
        */
        if (argc < 3){
                write(2,"Йоу, wrong number of arguments!\n", 32);
                exit(1);
        }

        //Ако са подадени точно два входни параметъра, то трябва да се копира съдържанието на първия във втория.
        if (argc == 3){
                /*
                Oтваряне на файлът подаден като първи входен параметър в режим на четене
                и проверка дали операцията се е осъществила успешно.
                */

                if ( (fd1 = open(argv[1], O_RDONLY)) == -1 ){
                        write(2, "Operation open failed!", 27);
                        exit(1);
                }

                /*
                Oтваряне на файл в режим на писане, ако не съществува го създава, ако съществува му занулява съдържаниет.
                */
                if ( (fd2 = open(argv[2], O_CREAT|O_WRONLY|O_TRUNC)) == -1 ){
                        write(2, "Operation open failed!", 27);
                        exit(1);
                }

                //каквото прочета от първия файл го записвам във втория файл
                //проверка дали успешно съм достъпил символ от съдържанието на файла.
                while( ( read_size=read(fd1, &c, 1) ) > 0 ){
                        if ( write(fd2, &c, read_size) != read_size ){
                                write(2, "Error while writing occured!", 28);
                                exit(1);
                        }
                }
                close(fd1);
                close(fd2);
                exit(0);
        }

        //сега ако са повече от два подадените параметри, трябва последния да бъде директория, в която да бъдат копирани един по един предхождащите я файлове.

        /*
        Обхождане на входните параметри и последователното им отваряне в режим на четене
        както и последвала проверка дали операцията се е осъществила успешно.
        */

        //забележете, че обхождам до строго по-малко от argc-1! (т.е. без последния параматър, който е директория)
        for(i=1;i<argc-1;i++){
                if ( (fd1 = open(argv[i], O_RDONLY)) == -1 ){
                        write(2, "Operation open failed!", 22);
                        exit(1);
                }

        //argv[argc-1] така достъпвам последният подаден входен параметър
        //ползвам chdir(), което не сме учили..
                chdir(argv[argc-1]);
                if ( (fd2 = open(argv[i], O_CREAT|O_WRONLY|O_TRUNC)) == -1 ){
                        write(2, "Operation open failed!", 22);
                        exit(1);
                }

                //Обхождам файла символ по символ и следя за разни символи, при които трябва да предприема някакво действие.
                //проверка дали успешно съм достъпил символ от съдържанието на файла.
                while( ( read_size=read(fd1, &c, 1) ) > 0 ){
                        if ( write(fd2, &c, read_size) != read_size ){
                                write(2, "Error while writing occured!", 28);
                                exit(1);
                        }

                }
                close(fd1);
                close(fd2);
                chdir("..");

        }
}


Решение на задача 6:
//Задача 6:
//Koпирайте файл /etc/passwd в текущата ви работна директория и променете разделителя на копирания файл
//от ":", на "?"

#include <fcntl.h>
#include <stdlib.h>
#include <stdio.h>

main (int argc, char* argv[]){
        int fd1, fd2;
        char c;         //променлива, чрез която ще обхождам съдържанието на файла подаден като първи входен параметър
        ssize_t read_size;      // Променлива, чрез която ще следя дали не настъпва грешка повреме на обхождането на съдържанието на файла.
        //Променливата е тип ssize_t, тъй като функцията read връща стойност тип ssize_t.

        /*
          проверка дали е подаден точно един входен параметър
        */
        if (argc != 2){
                write(2,"Йоу, wrong number of arguments!\n", 32);
                exit(1);
        }

        /*
          Oтваряне на файлът подаден като първи входен параметър в режим на четене
          и проверка дали операцията се е осъществила успешно.
        */
        if ( (fd1 = open(argv[1], O_RDONLY)) == -1 ){
                write(2, "Operation open failed!", 27);
                exit(1);
        }

        if ( (fd2 = open("my_new_file", O_CREAT|O_WRONLY|O_TRUNC)) == -1 ){
                write(2, "Operation open failed!", 27);
                exit(1);
        }

        //Обхождам файла символ по символ и следя за разни символи, при които трябва да предприема някакво действие.
        //проверка дали успешно съм достъпил символ от съдържанието на файла.
        while( ( read_size=read(fd1, &c, 1) ) > 0 ){
                //проверка дали съм прочел символ ":"
                if(c == ':'){
                        c='?';
                }

                if ( write(fd2, &c, 1) != read_size ){
                        write(2, "Error while writing occured!", 28);
                        exit(1);
                }
        }
        close(fd1);
        close(fd2);
}
